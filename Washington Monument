//renderer, scene, and camera init

const renderer = new THREE.WebGLRenderer();
renderer.setSize(window.innerWidth, window.innerHeight);
document.body.appendChild(renderer.domElement);

const camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 500);
camera.position.set(0, 0, 100);
camera.lookAt(0, 25, 0);

const scene = new THREE.Scene();



//FACE 1

const geometry = new THREE.BufferGeometry();
const vertices = new Float32Array( [
-2.25, 0,  2.25,
2.25, 0,  2.25,
1.7,  50,  1.7,
   
   1.7,  50,  1.7,
  -1.7,  50,  1.7,
  -1.7, 0,  2.25,

] );

// itemSize = 3 because there are 3 values (components) per vertex
geometry.setAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );
const material = new THREE.MeshBasicMaterial( { color: 0xff0000 } );
const mesh = new THREE.Mesh( geometry, material );

//FACE 2
const geometry2 = new THREE.BufferGeometry();
const vertices2 = new Float32Array( [
2.25, 0,   2.25,
2.25, 0,  -2.25,
1.7,  50,  -1.7,
   
   1.7,  50,  -1.7,
   1.7,  50,   1.7,
   1.7, 0,    2.25,

] );


geometry2.setAttribute( 'position', new THREE.BufferAttribute( vertices2, 3 ) );
const material2 = new THREE.MeshBasicMaterial( { color: 0x00ff20 } );
const mesh2 = new THREE.Mesh( geometry2, material2 );

//FACE 3
const geometry3 = new THREE.BufferGeometry();
const vertices3 = new Float32Array( [
2.25, 0,   -2.25,
-2.25, 0,  -2.25,
-1.7,  50,  -1.7,
   
   -1.7,  50,  -1.7,
   1.7,  50,  -1.7,
   1.7, 0,    -2.25,

] );

geometry3.setAttribute( 'position', new THREE.BufferAttribute( vertices3, 3 ) );
var side3color = new THREE.Color("green");
const material3 = new THREE.MeshBasicMaterial( { color: side3color } );
const mesh3 = new THREE.Mesh( geometry3, material3 );

//FACE 4
const geometry4 = new THREE.BufferGeometry();
const vertices4 = new Float32Array( [
-2.25, 0,   -2.25,
-2.25, 0,  2.25,
-1.7,  50,  1.7,
   
   -1.7,  50,  1.7,
   -1.7,  50,   -1.7,
   -1.7, 0,    -2.25,

] );


geometry4.setAttribute( 'position', new THREE.BufferAttribute( vertices4, 3 ) );
var side4color = new THREE.Color(0.62, 0.32, 0);
const material4 = new THREE.MeshBasicMaterial( { color: side4color } );
const mesh4 = new THREE.Mesh( geometry4, material4 );

//FACE 5
const geometry5 = new THREE.BufferGeometry();
const vertices5 = new Float32Array( [
-1.7, 50, 1.7,
 1.7, 50,  1.7,
0,  55.5,  0,

] );

geometry5.setAttribute( 'position', new THREE.BufferAttribute( vertices5, 3 ) );
var side5color = new THREE.Color(128, 0, 128);
const material5 = new THREE.MeshBasicMaterial( { color: side5color } );
const mesh5 = new THREE.Mesh( geometry5, material5 );

//FACE 6
const geometry6 = new THREE.BufferGeometry();
const vertices6 = new Float32Array( [
1.7, 50, 1.7,
1.7, 50,  -1.7,
0,  55.5,  0,

] );

geometry6.setAttribute( 'position', new THREE.BufferAttribute( vertices6, 3 ) );
const material6 = new THREE.MeshBasicMaterial( { color: 0x40E0D0 } );
const mesh6 = new THREE.Mesh( geometry6, material6 );

//FACE 7
const geometry7 = new THREE.BufferGeometry();
const vertices7 = new Float32Array( [
1.7, 50, -1.7,
-1.7, 50,  -1.7,
0,  55.5,  0,

] );

// 
geometry7.setAttribute( 'position', new THREE.BufferAttribute( vertices7, 3 ) );
const material7 = new THREE.MeshBasicMaterial( { color: 0xFFFFFF } );
const mesh7 = new THREE.Mesh( geometry7, material7 );

//FACE 8
const geometry8 = new THREE.BufferGeometry();
const vertices8 = new Float32Array( [
-1.7, 50, -1.7,
-1.7, 50,  1.7,
0,  55.5,  0,

] );

// itemSize = 3 because there are 3 values (components) per vertex
geometry8.setAttribute( 'position', new THREE.BufferAttribute( vertices8, 3 ) );
const side8color = new THREE.Color("hsl(280, 89%, 39%)");
const material8 = new THREE.MeshBasicMaterial( { color: side8color } );
const mesh8 = new THREE.Mesh( geometry8, material8 );


scene.add( mesh, mesh2, mesh3, mesh4, mesh5, mesh6, mesh7, mesh8 );


var animate = function () {
requestAnimationFrame( animate );

mesh.rotation.y += 0.03;
  mesh2.rotation.y += 0.03;
  mesh3.rotation.y += 0.03;
  mesh4.rotation.y += 0.03;
  mesh5.rotation.y += 0.03;
  mesh6.rotation.y += 0.03;
  mesh7.rotation.y += 0.03;
  mesh8.rotation.y += 0.03;

renderer.render( scene, camera );
};

animate();














